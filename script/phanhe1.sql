-- ============================
-- üì¶ PROC: T·∫†O USER T·ª∞ ƒê·ªòNG
-- ============================
-- INPUT:
--   p_username: T√™n user (VARCHAR2)
--   p_password: M·∫≠t kh·∫©u (VARCHAR2)
--   p_tablespace: T√™n tablespace (m·∫∑c ƒë·ªãnh: USERS)
--   p_profile: Profile s·ª≠ d·ª•ng (m·∫∑c ƒë·ªãnh: DEFAULT)
--   p_quota: Dung l∆∞·ª£ng quota, v√≠ d·ª• 'UNLIMITED' (c√≥ th·ªÉ NULL)
--   p_default_role: Role m·∫∑c ƒë·ªãnh mu·ªën g√°n (c√≥ th·ªÉ NULL)
--   p_grant_sysdba: G√°n quy·ªÅn SYSDBA hay kh√¥ng (BOOLEAN)

CONNECT admin/123456@localhost:1521/QLNHANVIEN;
CREATE OR REPLACE PROCEDURE PROC_CREATE_USER (
    p_username       IN VARCHAR2,
    p_password       IN VARCHAR2,
    p_tablespace     IN VARCHAR2 DEFAULT 'USERS',
    p_profile        IN VARCHAR2 DEFAULT 'DEFAULT',
    p_quota          IN VARCHAR2 DEFAULT NULL,
    p_default_role   IN VARCHAR2 DEFAULT NULL,
    p_grant_sysdba   IN BOOLEAN DEFAULT FALSE,
    p_status         OUT VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    -- M·ªü m·ªôt transaction (m·∫∑c ƒë·ªãnh l√† t·ª± ƒë·ªông)
    -- X√¢y d·ª±ng c√¢u l·ªánh CREATE USER
    v_sql := 'CREATE USER ' || p_username || 
             ' IDENTIFIED BY "' || p_password || '"' ||
             ' DEFAULT TABLESPACE ' || p_tablespace ||
             ' PROFILE ' || p_profile;

    IF p_quota IS NOT NULL THEN
        v_sql := v_sql || ' QUOTA ' || p_quota || ' ON ' || p_tablespace;
    END IF;

    -- Th·ª±c thi l·ªánh CREATE USER
    EXECUTE IMMEDIATE v_sql;

    -- C·∫•p quy·ªÅn CREATE SESSION cho ng∆∞·ªùi d√πng
    EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO ' || p_username;

    -- N·∫øu c√≥ role m·∫∑c ƒë·ªãnh, c·∫•p quy·ªÅn cho ng∆∞·ªùi d√πng
    IF p_default_role IS NOT NULL THEN
        EXECUTE IMMEDIATE 'GRANT ' || p_default_role || ' TO ' || p_username;
    END IF;

    -- N·∫øu c·∫ßn c·∫•p quy·ªÅn SYSDBA
    IF p_grant_sysdba THEN
        EXECUTE IMMEDIATE 'GRANT SYSDBA TO ' || p_username;
    END IF;

    -- N·∫øu kh√¥ng c√≥ l·ªói, commit transaction
    COMMIT;

    -- Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng
    p_status := 'SUCCESS: User ' || p_username || ' created.';
EXCEPTION
    WHEN OTHERS THEN
        -- N·∫øu c√≥ l·ªói, rollback t·∫•t c·∫£ c√°c thay ƒë·ªïi
        ROLLBACK;

        -- Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
        p_status := 'ERROR: ' || SQLERRM;
END;



-- ============================
-- üì¶ PROC: T·∫†O ROLE
-- ============================
-- INPUT:
--   p_role_name: T√™n role c·∫ßn t·∫°o (VARCHAR2)
CREATE OR REPLACE PROCEDURE PROC_CREATE_ROLE (
    p_role_name IN VARCHAR2
)
AS
BEGIN
    EXECUTE IMMEDIATE 'CREATE ROLE ' || p_role_name;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Role ' || p_role_name || ' created successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error creating role ' || p_role_name || ': ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: G√ÅN ROLE CHO USER
-- ============================
-- INPUT:
--   p_role_name: T√™n role (VARCHAR2)
--   p_username: T√™n user (VARCHAR2)
CREATE OR REPLACE PROCEDURE PROC_GRANT_ROLE_TO_USER (
    p_role_name IN VARCHAR2,
    p_username  IN VARCHAR2
)
AS
BEGIN
    EXECUTE IMMEDIATE 'GRANT ' || p_role_name || ' TO ' || p_username;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Granted role ' || p_role_name || ' to ' || p_username);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error granting role: ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: G√ÅN QUY·ªÄN CHO USER/ROLE (MULTI-PRIV)
-- ============================
-- INPUT:
--   p_privs: Danh s√°ch quy·ªÅn c√°ch nhau b·∫±ng d·∫•u ph·∫©y, v√≠ d·ª• 'SELECT,INSERT,UPDATE'
--   p_table: T√™n b·∫£ng (VARCHAR2)
--   p_target: T√™n user ho·∫∑c role c·∫ßn c·∫•p quy·ªÅn
CREATE OR REPLACE PROCEDURE PROC_GRANT_PRIVILEGE (
    p_privs     IN VARCHAR2,
    p_table     IN VARCHAR2,
    p_target    IN VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    v_sql := 'GRANT ' || p_privs || ' ON ' || p_table || ' TO ' || p_target;
    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Granted ' || p_privs || ' on ' || p_table || ' to ' || p_target);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error granting privilege: ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: THU H·ªíI QUY·ªÄN HO·∫∂C ROLE
-- ============================
-- INPUT:
--   p_type: 'ROLE' ho·∫∑c 'PRIV'
--   p_what: T√™n role ho·∫∑c t√™n quy·ªÅn (SELECT, INSERT, ...)
--   p_table: N·∫øu l√† quy·ªÅn th√¨ c·∫ßn ch·ªâ r√µ b·∫£ng (c√≥ th·ªÉ NULL n·∫øu p_type = 'ROLE')
--   p_target: User ho·∫∑c role b·ªã thu h·ªìi quy·ªÅn/role
CREATE OR REPLACE PROCEDURE PROC_REVOKE (
    p_type      IN VARCHAR2,  -- 'ROLE' or 'PRIV'
    p_what      IN VARCHAR2,  -- role name OR privilege
    p_table     IN VARCHAR2 DEFAULT NULL, -- only if privilege
    p_target    IN VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    IF p_type = 'ROLE' THEN
        v_sql := 'REVOKE ' || p_what || ' FROM ' || p_target;
    ELSE
        v_sql := 'REVOKE ' || p_what || ' ON ' || p_table || ' FROM ' || p_target;
    END IF;

    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Revoked successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error revoking: ' || SQLERRM);
END;
/
