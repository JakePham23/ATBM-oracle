-- ============================
-- Drop objects if they exist
-- ============================
-- C·∫•p quy·ªÅn qu·∫£n l√Ω user





-- Drop tables if they exist
BEGIN
  EXECUTE IMMEDIATE 'ALTER PLUGGABLE DATABASE QLNhanVien CLOSE IMMEDIATE';
  EXECUTE IMMEDIATE 'DROP PLUGGABLE DATABASE QLNhanVien INCLUDING DATAFILES';
EXCEPTION
  WHEN OTHERS THEN NULL; -- Ignore if PDB does not exist
END;
/

CREATE PLUGGABLE DATABASE QLNhanVien
  ADMIN USER admin IDENTIFIED BY 123456
  ROLES = (SYSDBA)
  FILE_NAME_CONVERT = ('/opt/oracle/oradata/FREE/pdbseed', '/opt/oracle/oradata/QLNhanVien/');  2    3    4  

-- ALTER PLUGGABLE DATABASE QLNhanVien OPEN;
-- CREATE USER ADMIN IDENTIFIED BY 123456;
-- GRANT CREATE USER TO ADMIN WITH ADMIN OPTION;
-- GRANT DROP USER TO ADMIN WITH ADMIN OPTION;
-- GRANT CREATE ROLE TO ADMIN WITH ADMIN OPTION;
-- GRANT GRANT ANY ROLE TO ADMIN;
-- GRANT CREATE PROCEDURE TO ADMIN;
-- GRANT EXECUTE ANY PROCEDURE TO ADMIN;
-- GRANT GRANT ANY PRIVILEGE TO ADMIN;



BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE DANGKY CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE MOMON CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE HOCPHAN CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE SINHVIEN CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE NHANVIEN CASCADE CONSTRAINTS';
    EXECUTE IMMEDIATE 'DROP TABLE DONVI CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN NULL; -- Ignore errors if tables do not exist
END;
/

-- Drop procedures if they exist
BEGIN
    EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_CREATE_USER';
    EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_CREATE_ROLE';
    EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_GRANT_ROLE_TO_USER';
    EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_GRANT_PRIVILEGE';
    EXECUTE IMMEDIATE 'DROP PROCEDURE PROC_REVOKE';
EXCEPTION
    WHEN OTHERS THEN NULL; -- Ignore errors if procedures do not exist
END;
/

-- Drop user if exists
BEGIN
    EXECUTE IMMEDIATE 'DROP USER admin CASCADE';
EXCEPTION
    WHEN OTHERS THEN NULL; -- Ignore errors if user does not exist
END;
/

-- ============================
-- Create new objects
-- ============================

-- CREATE PLUGGABLE DATABASE QLNhanVien

-- CREATE PLUGGABLE DATABASE QLNhanVien
--   ADMIN USER admin IDENTIFIED BY 123456
--   ROLES = (SYSDBA)
--   FILE_NAME_CONVERT = ('/opt/oracle/oradata/FREE/pdbseed', '/opt/oracle/oradata/QLNhanVien/');


-- Open the new PDB
-- ALTER PLUGGABLE DATABASE QLNhanVien OPEN;
-- Assign tablespace SYSTEM quota to user admin
-- ALTER SESSION SET CONTAINER = QLNhanVien;


-- Create tablespace USERS
CREATE TABLESPACE USERS
  DATAFILE '/opt/oracle/oradata/QLNHANVIEN/users.dbf'
  SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED;

-- CONNECT admin/123456@localhost:1521/QLNhanVien;

-- Create tables
CREATE TABLE DONVI (
    MADV VARCHAR2(10) PRIMARY KEY,
    TENDV VARCHAR2(100),
    LOAIDV VARCHAR2(20),
    TRGDV VARCHAR2(10) 
);

CREATE TABLE NHANVIEN (
    MANV VARCHAR2(20) PRIMARY KEY,
    HOTEN VARCHAR2(100),
    PHAI CHAR(1), -- 1: male, 0: female
    NGSINH DATE,
    LUONG NUMBER, 
    PHUCAP NUMBER,
    DT VARCHAR2(15),
    VAITRO VARCHAR2(50),
    MADV VARCHAR2(10), 
    FOREIGN KEY (MADV) REFERENCES DONVI(MADV)
);

CREATE TABLE SINHVIEN (
    MASV VARCHAR2(20) PRIMARY KEY,
    HOTEN VARCHAR2(100),
    PHAI CHAR(1),
    NGSINH DATE,
    DCHI VARCHAR2(256), 
    DT VARCHAR2(15),
    KHOA VARCHAR2(10),
    TINHTRANG VARCHAR2(100)
);

CREATE TABLE HOCPHAN (
    MAHP VARCHAR2(10) PRIMARY KEY,
    TENHP VARCHAR2(100),
    SOTC NUMBER,
    STLT NUMBER,
    STTH NUMBER,
    MADV VARCHAR2(10),
    FOREIGN KEY (MADV) REFERENCES DONVI(MADV)
);

CREATE TABLE MOMON (
    MAMM VARCHAR2(10) PRIMARY KEY,
    MAHP VARCHAR2(10),
    MAGV VARCHAR2(10),
    HK NUMBER,
    NAM NUMBER,
    FOREIGN KEY (MAHP) REFERENCES HOCPHAN(MAHP),
    FOREIGN KEY (MAGV) REFERENCES NHANVIEN(MANV)
);

CREATE TABLE DANGKY (
    MASV VARCHAR2(20),
    MAMM VARCHAR2(10),
    DIEMTH NUMBER,
    DIEMQT NUMBER,
    DIEMCK NUMBER,
    DIEMTK NUMBER,
    PRIMARY KEY (MASV, MAMM),
    FOREIGN KEY (MASV) REFERENCES SINHVIEN(MASV),
    FOREIGN KEY (MAMM) REFERENCES MOMON(MAMM)
);
-- DIEMTK: => DIEMQT*20% + DIEMTH*30% + DIEMCK*50%


-- CREATE TABLE DONVI (
--     MADV VARCHAR2(10) PRIMARY KEY,
--     TENDV VARCHAR2(100),
--     LOAIDV VARCHAR2(20),
--     TRGDV VARCHAR2(10) 
-- );
-- MADV: HOA => TENDV: Khoa ho√° h·ªçc => LOAIDV: KHOA
-- MADV PDT => TENDV: Ph√≤ng ƒë√†o t·∫°o => LOAIDV: PHONG
CREATE ROLE GV;
CREATE ROLE CBNV;
CREATE ROLE TEMPLATE;


INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('PDT', 'Ph√≤ng ƒë√†o t·∫°o', 'PHONG');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('PKT', 'Ph√≤ng k·∫ø to√°n', 'PHONG');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('CTSV', 'Ph√≤ng c√¥ng t√°c sinh vi√™n', 'PHONG');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('TOAN', 'Khoa To√°n h·ªçc', 'KHOA');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('VATLY', 'Khoa V·∫≠t l√Ω', 'KHOA');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('CNTT', 'Khoa C√¥ng ngh·ªá th√¥ng tin', 'KHOA');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('HOA', 'Khoa Ho√° h·ªçc', 'KHOA');
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('KHKT', 'Khoa k·ªπ thu·∫≠t', 'KHOA');  
INSERT INTO DONVI(MADV, TENDV, LOAIDV) VALUES ('SINH', 'Khoa Sinh h·ªçc', 'KHOA');
-- SINHVIEN: csv
-- NHANVIEN

-- HOCPHAN
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00003', 'Vi t√≠ch ph√¢n 1B', 3, 45, 0, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00081', 'Th·ª±c h√†nh Vi t√≠ch ph√¢n 1B', 1, 0, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00004', 'Vi t√≠ch ph√¢n 2B', 3, 45, 0, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00082', 'Th·ª±c h√†nh Vi t√≠ch ph√¢n 2B', 1, 0, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00030', 'ƒê·∫°i s·ªë tuy·∫øn t√≠nh', 3, 45, 0, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00083', 'Th·ª±c h√†nh ƒê·∫°i s·ªë tuy·∫øn t√≠nh', 1, 0, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00040', 'X√°c xu·∫•t th·ªëng k√™', 3, 45, 0, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00085', 'Th·ª±c h√†nh X√°c xu·∫•t th·ªëng k√™', 1, 0, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00041', 'To√°n r·ªùi r·∫°c', 3, 45, 0, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00086', 'Th·ª±c h√†nh To√°n r·ªùi r·∫°c', 1, 0, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00050', 'To√°n h·ªçc t·ªï h·ª£p', 4, 45, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00051', 'To√°n ·ª©ng d·ª•ng v√† th·ªëng k√™', 4, 45, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00052', 'Ph∆∞∆°ng ph√°p t√≠nh', 4, 45, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00053', 'L√Ω thuy·∫øt s·ªë', 4, 45, 30, 'TOAN');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('MTH00054', 'Ph√©p t√≠nh v·ªã t·ª´', 4, 45, 30, 'TOAN');


INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('PHY00001', 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 1', 3, 30, 0, 'VATLY');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('PHY00002', 'V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 2', 3, 30, 0, 'VATLY');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('PHY00081', 'Th·ª±c h√†nh V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 1', 2, 0, 60, 'VATLY');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('PHY00082', 'Th·ª±c h√†nh V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 2', 2, 0, 60, 'VATLY');

INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('BIO00001', 'Sinh ƒë·∫°i c∆∞∆°ng 1', 3, 30, 0, 'SINH');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('BIO00002', 'Sinh ƒë·∫°i c∆∞∆°ng 2', 3, 30, 0, 'SINH');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('BIO00081', 'Th·ª±c h√†nh Sinh ƒë·∫°i c∆∞∆°ng 1', 2, 0, 60, 'SINH');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('BIO00082', 'Th·ª±c h√†nh Sinh ƒë·∫°i c∆∞∆°ng 2', 2, 0, 60, 'SINH');

INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10001', 'Nh·∫≠p m√¥n l√¢p tr√¨nh', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10002', 'K·ªπ thu·∫≠t l·∫≠p tr√¨nh', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10003', 'Ph∆∞∆°ng ph√°p l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10004', 'C·∫•u tr√∫c d·ªØ li·ªáu v√† gi·∫£i thu·∫≠t', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10006', 'C∆° s·ªü d·ªØ li·ªáu', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10007', 'H·ªá ƒëi·ªÅu h√†nh', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10008', 'M·∫°ng m√°y t√≠nh', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC10009', 'H·ªá th·ªëng m√°y t√≠nh', 2, 30, 0, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC13002', 'Nh·∫≠p m√¥n c√¥ng ngh·ªá ph·∫ßn m·ªÅm', 4, 45, 30, 'CNTT');
INSERT INTO HOCPHAN(MAHP, TENHP, SOTC, STLT, STTH, MADV) VALUES ('CSC14003', 'C∆° s·ªü tr√≠ tu·ªá nh√¢n t·∫°o', 4, 45, 30, 'CNTT');


-- sqlldr ADMIN/123456@localhost:1521/QLNHANVIEN control=sinhvien.ctl log=data_sinhvien.log bad=sinhvien.bad



-- ============================
-- üì¶ PROC: T·∫†O USER T·ª∞ ƒê·ªòNG
-- ============================
-- INPUT:
--   p_username: T√™n user (VARCHAR2)
--   p_password: M·∫≠t kh·∫©u (VARCHAR2)
--   p_tablespace: T√™n tablespace (m·∫∑c ƒë·ªãnh: USERS)
--   p_profile: Profile s·ª≠ d·ª•ng (m·∫∑c ƒë·ªãnh: DEFAULT)
--   p_quota: Dung l∆∞·ª£ng quota, v√≠ d·ª• 'UNLIMITED' (c√≥ th·ªÉ NULL)
--   p_default_role: Role m·∫∑c ƒë·ªãnh mu·ªën g√°n (c√≥ th·ªÉ NULL)
--   p_grant_sysdba: G√°n quy·ªÅn SYSDBA hay kh√¥ng (BOOLEAN)

CREATE OR REPLACE PROCEDURE PROC_CREATE_USER (
    p_username       IN VARCHAR2,
    p_password       IN VARCHAR2,
    p_tablespace     IN VARCHAR2 DEFAULT 'USERS',
    p_profile        IN VARCHAR2 DEFAULT 'DEFAULT',
    p_quota          IN VARCHAR2 DEFAULT NULL,
    p_default_role   IN VARCHAR2 DEFAULT NULL,
    p_grant_sysdba   IN BOOLEAN DEFAULT FALSE,
    p_status         OUT VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    -- X√¢y d·ª±ng c√¢u l·ªánh CREATE USER
    v_sql := 'CREATE USER ' || p_username || ' IDENTIFIED BY ' || p_password || 
             ' DEFAULT TABLESPACE ' || p_tablespace || ' PROFILE ' || p_profile;

    DBMS_OUTPUT.PUT_LINE('SQL: ' || v_sql);  -- Hi·ªÉn th·ªã c√¢u l·ªánh SQL

    IF p_quota IS NOT NULL THEN
        v_sql := v_sql || ' QUOTA ' || p_quota || ' ON ' || p_tablespace;
    END IF;

    -- Th·ª±c thi l·ªánh CREATE USER
    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE('User ' || p_username || ' created successfully');



    -- -- C·∫•p role m·∫∑c ƒë·ªãnh n·∫øu c√≥
    -- IF p_default_role IS NOT NULL THEN
    --     EXECUTE IMMEDIATE 'GRANT ' || p_default_role || ' TO ' || p_username;
    --     DBMS_OUTPUT.PUT_LINE('GRANT ' || p_default_role || ' TO ' || p_username);
    -- END IF;


    -- -- C·∫•p SYSDBA n·∫øu c·∫ßn
    -- IF p_grant_sysdba THEN
    --     EXECUTE IMMEDIATE 'GRANT SYSDBA TO ' || p_username;
    --     DBMS_OUTPUT.PUT_LINE('GRANT SYSDBA TO ' || p_username);
    -- END IF;

    -- C·∫•p quy·ªÅn CREATE SESSION
    EXECUTE IMMEDIATE 'GRANT CREATE SESSION TO ' || p_username;
    DBMS_OUTPUT.PUT_LINE('GRANT CREATE SESSION TO ' || p_username);

    COMMIT;
    p_status := 'User created successfully';
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);  -- In th√¥ng b√°o l·ªói

        p_status := 'Error: ' || SQLERRM;
END;
/




-- ============================
-- üì¶ PROC: T·∫†O ROLE
-- ============================
-- INPUT:
--   p_role_name: T√™n role c·∫ßn t·∫°o (VARCHAR2)
CREATE OR REPLACE PROCEDURE PROC_CREATE_ROLE (
    p_role_name IN VARCHAR2
)
AS
BEGIN
    EXECUTE IMMEDIATE 'CREATE ROLE ' || p_role_name;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Role ' || p_role_name || ' created successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error creating role ' || p_role_name || ': ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: G√ÅN ROLE CHO USER
-- ============================
-- INPUT:
--   p_role_name: T√™n role (VARCHAR2)
--   p_username: T√™n user (VARCHAR2)
CREATE OR REPLACE PROCEDURE PROC_GRANT_ROLE_TO_USER (
    p_role_name IN VARCHAR2,
    p_username  IN VARCHAR2
)
AS
BEGIN
    EXECUTE IMMEDIATE 'GRANT ' || p_role_name || ' TO ' || p_username;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Granted role ' || p_role_name || ' to ' || p_username);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error granting role: ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: G√ÅN QUY·ªÄN CHO USER/ROLE (MULTI-PRIV)
-- ============================
-- INPUT:
--   p_privs: Danh s√°ch quy·ªÅn c√°ch nhau b·∫±ng d·∫•u ph·∫©y, v√≠ d·ª• 'SELECT,INSERT,UPDATE'
--   p_table: T√™n b·∫£ng (VARCHAR2)
--   p_target: T√™n user ho·∫∑c role c·∫ßn c·∫•p quy·ªÅn
CREATE OR REPLACE PROCEDURE PROC_GRANT_PRIVILEGE (
    p_privs     IN VARCHAR2,
    p_table     IN VARCHAR2,
    p_target    IN VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    v_sql := 'GRANT ' || p_privs || ' ON ' || p_table || ' TO ' || p_target;
    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Granted ' || p_privs || ' on ' || p_table || ' to ' || p_target);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error granting privilege: ' || SQLERRM);
END;
/

-- ============================
-- üì¶ PROC: THU H·ªíI QUY·ªÄN HO·∫∂C ROLE
-- ============================
-- INPUT:
--   p_type: 'ROLE' ho·∫∑c 'PRIV'
--   p_what: T√™n role ho·∫∑c t√™n quy·ªÅn (SELECT, INSERT, ...)
--   p_table: N·∫øu l√† quy·ªÅn th√¨ c·∫ßn ch·ªâ r√µ b·∫£ng (c√≥ th·ªÉ NULL n·∫øu p_type = 'ROLE')
--   p_target: User ho·∫∑c role b·ªã thu h·ªìi quy·ªÅn/role
CREATE OR REPLACE PROCEDURE PROC_REVOKE (
    p_type      IN VARCHAR2,  -- 'ROLE' or 'PRIV'
    p_what      IN VARCHAR2,  -- role name OR privilege
    p_table     IN VARCHAR2 DEFAULT NULL, -- only if privilege
    p_target    IN VARCHAR2
)
AS
    v_sql VARCHAR2(1000);
BEGIN
    IF p_type = 'ROLE' THEN
        v_sql := 'REVOKE ' || p_what || ' FROM ' || p_target;
    ELSE
        v_sql := 'REVOKE ' || p_what || ' ON ' || p_table || ' FROM ' || p_target;
    END IF;

    EXECUTE IMMEDIATE v_sql;
    DBMS_OUTPUT.PUT_LINE('‚úÖ Revoked successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('‚ùå Error revoking: ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;
DECLARE
  v_status VARCHAR2(400);  
  v_username VARCHAR2(30) := 'demo_user_53';  -- T√™n user v·ª´a t·∫°o

BEGIN
  SYSTEM.PROC_CREATE_USER(
    p_username     => v_username,
    p_password     => '123456',
    p_tablespace   => 'USERS',
    p_profile      => 'DEFAULT',
    p_quota        => 'UNLIMITED',
    p_default_role => '',
    p_grant_sysdba => FALSE,
    p_status       => v_status
  );
  DBMS_OUTPUT.PUT_LINE(v_status);
  -- Ki·ªÉm tra c√°c role ƒë∆∞·ª£c c·∫•p cho user
  FOR rec IN (SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = v_username) LOOP
    DBMS_OUTPUT.PUT_LINE('Role granted to user ' || v_username || ': ' || rec.GRANTED_ROLE);
  END LOOP;

  -- Ki·ªÉm tra quy·ªÅn c·ªßa user tr√™n c√°c b·∫£ng (n·∫øu c√≥)
  FOR rec IN (SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = v_username) LOOP
    DBMS_OUTPUT.PUT_LINE('Table privilege granted to ' || v_username || ': ' || rec.TABLE_NAME || ' - ' || rec.PRIVILEGE);
  END LOOP;
  
  -- Ki·ªÉm tra quy·ªÅn h·ªá th·ªëng c·ªßa user (n·∫øu c√≥)
  FOR rec IN (SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = v_username) LOOP
    DBMS_OUTPUT.PUT_LINE('System privilege granted to ' || v_username || ': ' || rec.PRIVILEGE);
  END LOOP;

  -- Ki·ªÉm tra quy·ªÅn c·ªßa user trong c√°c role (l·∫∑p l·∫°i ƒë·ªÉ ch·∫Øc ch·∫Øn c√°c quy·ªÅn role)
  FOR rec IN (SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = v_username) LOOP
    DBMS_OUTPUT.PUT_LINE('Role ' || rec.GRANTED_ROLE || ' granted to user ' || v_username);
  END LOOP;
END;
/
